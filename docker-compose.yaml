volumes:
  pgdatasource:

services:
  db:
    image: postgres
    container_name: company-db
    restart: always
    environment:
      - DATABASE_HOST=127.0.0.1
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_PORT=5432
      - POSTGRES_DB=company
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - pgdatasource:/var/lib/postgresql/data

  api:
    build: api/
    container_name: company-api
    # restart: always
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080"
    networks:
      - app-network
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=company-db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_PORT=5432
      - POSTGRES_DB=company
      - SESSION_KEY=reallycoolneatosecret
    # volumes:
    #   - type: bind
    #     source: ./api
    #     target: /api

  ui:
    build: app/
    tty: true
    container_name: company-ui
    environment:
      - FAST_REFRESH=false
    depends_on:
      - "api"
    ports:
      - "3000:3000"
    networks:
      - app-network
    # Uncomment for hot reload
    # volumes:
    #   - type: bind
    #     source: ./app
    #     target: /app
    #   - /app/node_modules

networks:
  app-network:
    driver: bridge
